security:

    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

    providers:
#        admin:
#            entity:
#                class: App\Entity\User
##                    property: username


        fos_userbundle:
            id: fos_user.user_provider.username
#
#        adminbundle:
#            id: sonata_admin.user_provider.username

    firewalls:

#        admin:
#            pattern: /admin(.*)
##            context: user
#            form_login:
#                provider: adminbundle
#                login_path: /admin/login
#                use_forward: false
#                check_path: /admin/login_check
#                failure_path: null
#            logout:
#                path: /admin/logout
#                target: /admin/login
##            logout:    true
#            anonymous: true

        main:
            pattern:      .*
            form-login:
                provider:       fos_userbundle
                login_path:     /login
                use_forward:    false
                check_path:     /login_check
                failure_path:   null
            logout:       true
            anonymous:    true


    access_control:

        # The WDT has to be allowed to anonymous users to avoid requiring the login with the AJAX request
        - { path: ^/wdt/, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/profiler/, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # AsseticBundle paths used when using the controller for assets
        - { path: ^/js/, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/css/, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # URL of FOSUserBundle which need to be available to anonymous users
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY } # for the case of a failed login
        - { path: ^/user/new$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/check-confirmation-email$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/confirm/, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/confirmed$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/request-reset-password$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/send-resetting-email$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/check-resetting-email$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/user/reset-password/, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: ROLE_ADMIN }
        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY }

    # Sonata "special" roles (ROLE_SONATA_ADMIN and ROLE_SUPER_ADMIN) are configurable
    role_hierarchy:
        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

#    acl:
#        connection: default












#security:
#    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
#    encoders:
#        App\Entity\User: bcrypt
#
#    providers:
#        fos_userbundle:
#            id: fos_user.user_provider.username
#
#    firewalls:
#        dev:
#            pattern: ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#        main:
#            anonymous: ~
#            #http_basic: ~
#            form_login:
#                provider: fos_userbundle
#                default_target_path: /
#
#            logout:
#                path: /logout
#                target: /
#
#            remember_me:
#                secret:   '%env(APP_SECRET)%'
#                lifetime: 604800 # 1 week in seconds
#                path:     /
#                always_remember_me: true
#
#            # activate different ways to authenticate
#
#            # http_basic: ~
#            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate
#
#            # form_login: ~
#            # https://symfony.com/doc/current/security/form_login_setup.html
#
#    access_control:
#        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        #- { path: ^/admin, roles: [ROLE_SUPER_ADMIN] }
#        - { path: ^/., roles: IS_AUTHENTICATED_ANONYMOUSLY }
#
#
#
#
#
#    role_hierarchy:
#
#        # for convenience, I decided to gather Sonata roles here
#        ROLE_SONATA_FOO_READER:
#            - ROLE_SONATA_ADMIN_DEMO_FOO_LIST
#            - ROLE_SONATA_ADMIN_DEMO_FOO_VIEW
#        ROLE_SONATA_FOO_EDITOR:
#            - ROLE_SONATA_ADMIN_DEMO_FOO_CREATE
#            - ROLE_SONATA_ADMIN_DEMO_FOO_EDIT
#        ROLE_SONATA_FOO_ADMIN:
#            - ROLE_SONATA_ADMIN_DEMO_FOO_DELETE
#            - ROLE_SONATA_ADMIN_DEMO_FOO_EXPORT
#
#        # those are the roles I will use (less verbose)
#        ROLE_STAFF: [ ROLE_USER, ROLE_SONATA_FOO_READER ]
#        ROLE_ADMIN: [ ROLE_STAFF, ROLE_SONATA_FOO_EDITOR, ROLE_SONATA_FOO_ADMIN ]
#        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]
#
#        # you could alternatively use for an admin who has all rights
#        ROLE_ALL_ADMIN: [ ROLE_STAFF, ROLE_SONATA_FOO_ALL ]
#
#        # set access_strategy to unanimous, else you may have unexpected behaviors
#        access_decision_manager:
#            strategy: unanimous